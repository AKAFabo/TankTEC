/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.tanktec;

import com.mycompany.tanktec.Player.Tank;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.Timer;

/**
 *
 * @author Fabo
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        
        initializeImageMap();
        
        initComponents();
        setBoard();
        
        GamePlayPanel.setFocusable(true);
        GamePlayPanel.requestFocusInWindow();
        GamePlayPanel.addKeyListener(new TankKeyListener());
        
        movementTimer = new Timer(500, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Detener el temporizador después de cada período de descanso
                movementTimer.stop();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GamePlayPanel = new javax.swing.JPanel();
        enemiesLeftLabel = new javax.swing.JLabel();
        playerLifesLabel = new javax.swing.JLabel();
        actualLevelLabel = new javax.swing.JLabel();
        wildcardLabel = new javax.swing.JLabel();
        startLevelButton = new javax.swing.JButton();
        nextLevelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));

        GamePlayPanel.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout GamePlayPanelLayout = new javax.swing.GroupLayout(GamePlayPanel);
        GamePlayPanel.setLayout(GamePlayPanelLayout);
        GamePlayPanelLayout.setHorizontalGroup(
            GamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
        );
        GamePlayPanelLayout.setVerticalGroup(
            GamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
        );

        enemiesLeftLabel.setText("Enemigos restantes: " +  enemiesLeft);

        playerLifesLabel.setText("Vidas restantes: " + playerLifes);

        actualLevelLabel.setText("Nivel actual: " + actualLevel);

        wildcardLabel.setText("Comodin actual:");

        startLevelButton.setText("Empezar nivel");
        startLevelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startLevelButtonActionPerformed(evt);
            }
        });

        nextLevelButton.setText("Siguiente nivel");
        nextLevelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextLevelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(GamePlayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(enemiesLeftLabel)
                    .addComponent(playerLifesLabel)
                    .addComponent(actualLevelLabel)
                    .addComponent(wildcardLabel)
                    .addComponent(startLevelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nextLevelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(enemiesLeftLabel)
                .addGap(65, 65, 65)
                .addComponent(playerLifesLabel)
                .addGap(65, 65, 65)
                .addComponent(actualLevelLabel)
                .addGap(75, 75, 75)
                .addComponent(wildcardLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(startLevelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nextLevelButton)
                .addGap(42, 42, 42))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(GamePlayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startLevelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startLevelButtonActionPerformed
        
    }//GEN-LAST:event_startLevelButtonActionPerformed

    private void nextLevelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextLevelButtonActionPerformed
        loadNextLevel();
        GamePlayPanel.setFocusable(true);
        GamePlayPanel.requestFocusInWindow();
        //GamePlayPanel.addKeyListener(new TankKeyListener());
    }//GEN-LAST:event_nextLevelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    
    public void setBoard() {

        GamePlayPanel.setPreferredSize(new Dimension(620, 620));
       
        GridLayout gridLayout = new GridLayout(13, 13);
        GamePlayPanel.setLayout(gridLayout);
        
        levelMatrix = levelBuilder.levelChooser(actualLevel);

        for (int i = 0; i < 13; i++) {
            for (int j = 0; j < 13; j++) {
                
                

                labels[i][j] = new JLabel();
                labels[i][j].setOpaque(true);
                
                int identifier = levelMatrix[i][j];
                ImageIcon imageIcon = imageMap.get(identifier);
                
                if (identifier != 0){
                    labels[i][j].setIcon(imageIcon);
                    if (identifier != 5){ //Si es arbol es transparente
                        hasWall[i][j] = true; //Se hace para verificar las colisiones a la hora de mover el tanque enemigo y propio
                    } else {
                        hasGrass[i][j] = true;
                    }
                } else {
                    labels[i][j].setBackground(new java.awt.Color(0, 0, 0));
                }

                labels[i][j].setPreferredSize(new Dimension(labelSize, labelSize));

                GamePlayPanel.add(labels[i][j]);
            }
        }
        
        labels[TankY][TankX].setIcon(new ImageIcon(tank.getIcon()));       
    }
    
    public void loadNextLevel() {
        actualLevel++;

        if (actualLevel <= maxLevel) {
            // Limpiar el panel actual
            GamePlayPanel.removeAll();

            levelMatrix = levelBuilder.levelChooser(actualLevel);

            for (int i = 0; i < 13; i++) {
                for (int j = 0; j < 13; j++) {
                    labels[i][j] = new JLabel();
                    labels[i][j].setOpaque(true);
                    hasWall[i][j] = false;
                    hasGrass[i][j] = false;

                    int identifier = levelMatrix[i][j];
                    ImageIcon imageIcon = imageMap.get(identifier);

                    if (identifier != 0) {
                        labels[i][j].setIcon(imageIcon);
                        if (identifier != 5) {
                            hasWall[i][j] = true;
                        } else {
                            hasGrass[i][j] = true;
                        }
                    } else {
                        labels[i][j].setBackground(new java.awt.Color(0, 0, 0));
                    }
                    labels[i][j].setPreferredSize(new Dimension(labelSize, labelSize));
                    GamePlayPanel.add(labels[i][j]);
                }
            }
            GamePlayPanel.revalidate();
            GamePlayPanel.repaint();
            
            TankY = 12;
            TankX = 4;

            labels[TankY][TankX].setIcon(new ImageIcon(tank.getIcon()));

        } else {

            System.out.println("¡Has completado todos los niveles!");
        }
    }
          
    private void initializeImageMap() {
        imageMap.put(1, new ImageIcon("src/main/resources/water.jpg"));
        imageMap.put(2, new ImageIcon("src/main/resources/metalWall.jpg"));
        imageMap.put(3, new ImageIcon("src/main/resources/home.jpg"));
        imageMap.put(4, new ImageIcon("src/main/resources/brickWall.jpg"));
        imageMap.put(5, new ImageIcon("src/main/resources/tree.jpg"));
    }
    
    private class TankKeyListener implements KeyListener {
             
        @Override
        public void keyPressed(KeyEvent e) {
            int keyCode = e.getKeyCode();
            
            switch (keyCode){
                case KeyEvent.VK_W -> moveTank(-1,0, 'W');
                case KeyEvent.VK_S -> moveTank(1,0, 'S');
                case KeyEvent.VK_A -> moveTank(0,-1, 'A');
                case KeyEvent.VK_D -> moveTank(0,1, 'D');
            }       
            
            new Thread(() -> {
            movementTimer.start();
        }).start();
        }

        @Override
        public void keyReleased(KeyEvent e) {
            
        } 
        @Override
        public void keyTyped(KeyEvent e) {
            
        }
    }
    
    private void moveTank(int deltaY, int deltaX, char key) {
        int newTankX = TankX + deltaX;
        int newTankY = TankY + deltaY;
        
        if (isValidMovement(newTankY, newTankX)) {

        boolean originalHasGrass = hasGrass[TankY][TankX];

        if (originalHasGrass) {
            labels[TankY][TankX].setBackground(new Color(144, 238, 144)); 
        } else {
            labels[TankY][TankX].setIcon(null);
        }

        TankY = newTankY;
        TankX = newTankX;

        switch (key) {
            case 'W' -> tank.setIcon("src/main/resources/tankU.gif");
            case 'A' -> tank.setIcon("src/main/resources/tankL.gif");
            case 'S' -> tank.setIcon("src/main/resources/tankD.gif");
            case 'D' -> tank.setIcon("src/main/resources/tankR.gif");
        }

        boolean newHasGrass = hasGrass[TankY][TankX];

        if (newHasGrass) {
            labels[TankY][TankX].setBackground(new Color(173, 216, 230)); 
        } else {
            labels[TankY][TankX].setIcon(new ImageIcon(tank.getIcon()));
        }
    }

        
    }
    
    private boolean isValidMovement(int y, int x){
        
        return y >= 0 && y < labels.length && x >= 0 && x < labels[0].length && !hasWall[y][x];
    }
    
    private JLabel[][] labels = new JLabel[13][13];
    private boolean[][] hasWall = new boolean[13][13];
    private boolean[][] hasGrass = new boolean[13][13];
    private int enemiesLeft = 20;
    private int playerLifes = 3;
    private int actualLevel = 1;
    private int maxLevel = 8;
    private int TankX = 4;
    private int TankY = 12;
    int labelSize = 620 / 13;
    
    private Map<Integer, ImageIcon> imageMap = new HashMap<>(); //Hash Map utilizado para crear niveles
    private int[][] levelMatrix;
    
    Tank tank = new Tank(500, "src/main/resources/tankU.gif", 1); //Crear tanque para colocar su label en la matriz y obtener sus atributos
    
    Timer movementTimer;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel GamePlayPanel;
    private javax.swing.JLabel actualLevelLabel;
    private javax.swing.JLabel enemiesLeftLabel;
    private javax.swing.JButton nextLevelButton;
    private javax.swing.JLabel playerLifesLabel;
    private javax.swing.JButton startLevelButton;
    private javax.swing.JLabel wildcardLabel;
    // End of variables declaration//GEN-END:variables
}